/*
ou are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
   	    ListNode l3 = new ListNode(-1);
    	ListNode pCurNode = l3;
    	int flag = 0;
    	while(l1 != null || l2 != null){
    		int v1 = l1 != null ? l1.val : 0;
    		int v2 = l2 != null ? l2.val : 0;
    		int temp = v1 + v2 + flag;
    		flag = temp / 10;
    		ListNode pNode = new ListNode(temp % 10);
    		pCurNode.next = pNode;
    		pCurNode = pNode;
    		if(l1 != null){
    			l1 = l1.next;
    		}
    		if(l2 != null){
    			l2 = l2.next;
    		}
    	}
    	if(flag > 0){
    		ListNode pNode = new ListNode(flag);
    		pCurNode.next = pNode;
    	}
    	return l3.next;
    }
}
