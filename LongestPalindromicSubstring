/*

Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

*/


public class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0){
        	return null;
        }
        String longest = s.substring(0,1);
        for(int i = 0 ; i < s.length() - 1; i++){
        	String p1 = judge(s , i , i);
        	String p2 = judge(s , i , i + 1);
            if(p1.length() > longest.length()){
            	longest = p1;
            }
            if(p2.length() > longest.length()){
            	longest = p2;
            }
        }
        return longest;
    }
    public String judge(String s , int index1 , int index2){
    	while(index1 >= 0 && index2 < s.length() && s.charAt(index1) == s.charAt(index2)){
    	//	System.out.println(s.charAt(index1) + " " + s.charAt(index2));
    		index1 --;
    		index2 ++;
    	}
    	return s.substring(index1 + 1, index2);
    }
}
